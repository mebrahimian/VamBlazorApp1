@page "/pageqvam"

@inject DatabaseContext _Db
@inject DateService DateService
@inject ILogger<PageQVam> _logger
@inject VamBlazor.Client.Application.Services.PersonServices PersonServices
@inject IMapper Mapper
@inject NavigationManager Navigation
@inject IDialogService DialogService
@layout MainLayout
@inject DtoComparer comparer

@using AutoMapper
@using System.ComponentModel.DataAnnotations
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using Serilog
@using Serilog.Core
@using System.Data
@using VamBlazor.Client.Application.Dto_Utilities
@using VamBlazor.Client.Domain.Entities
@using VamBlazor.Client.Domain.Enum
@using VamBlazor.Client.Application.Dtos
@using VamBlazor.Client.Application.Mappings
@using VamBlazor.Client.Application.CommonFunc
@using VamBlazor.Client.Shared.Dialogs
@using VamBlazor.Client.Application.Services


<MudContainer style="font-family:'VazirUI'">

    <MudPaper Class="half-width" Style="width: 50%; margin: 0 auto;">
        <!-- MudForm برای مدیریت فرم و اعتبارسنجی -->
        <MudText Typo="Typo.body2" Align="Align.Center" Style="height:25px;background-color:cadetblue" Class="mt-2">فرم ورودمتقاضیان دریافت وام</MudText>
        <MudForm @ref="PersonsQVamForm" Model="@CurrentPersonQVamDto" @bind-IsValid="isDataCorrected" Spacing="16" Class="p-4">

            <MudGrid>
                <MudItem xs="12">
                    <MudAutocomplete T="PersonFullDataDto"
                    Label="لطفا سپرده گذار را انتخاب کنید ..."
                    @bind-Value="selectedPerson"
                    SearchFunc="@SearchPerson"
                    ToStringFunc="@(_personFullDataList => _personFullDataList?.FullNameWCode ?? "")"
                    Dense="true" Clearable
                    OnBlur="OnPCodeChanged"
                    TextChanged="OnPCodeChanged"
                    MaxItems="50"
                    ShowProgressIndicator="true" />

                </MudItem>
                <!-- ردیف دوم: ReqNo & Date -->

                <MudItem xs="12" sm="6">
                    <!--  <MudBadge>
                    <MudIcon Icon="@Icons.Material.Filled.Star" />
                    </MudBadge> -->
                    <div class="mt-n6" style="display: flex;font-size: 18px; font-weight: bold;">
                        <MudTextField T="int" Style="justify-content:right;width:65%" @ref="myTextField"
                        Label="شماره تقاضا"
                        Required
                        Immediate="true"
                        For="@(() => CurrentPersonQVamDto.ReqNo)"
                        @bind-Value="@ReqNoSearchable" @bind-Value:after="isDataChanged"
                        InputType="InputType.Text"
                        Format="###"                        
                        OnBlur="OnReqNoChanged"
                        ErrorText="@GetErrorMessageForField(nameof(CurrentPersonQVamDto.ReqNo))" />

                        <MudText Style="justify-content:left;width:45%" Class="mt-5 ml-n3">تاریخ تقاضا :</MudText>
                    </div>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <div class="mt-n6 mr-n3" style="display: flex;font-size: 16px; font-weight: bold;">

                        <!-- فیلد روز -->

                        <MudTooltip Text="لطفاً یک روز معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                            <MudNumericField T="int" Variant="Variant.Outlined"
                            @bind-Value="CurrentPersonQVamDto.V_Day"
                            @bind-Value:after="isDataChanged"
                            Min="1"
                            Max="31"
                            Immediate="true" />
                        </MudTooltip>

                        <!-- فیلد ماه -->

                        <MudTooltip Text="لطفاً یک ماه معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                            <MudNumericField T="int" Variant="Variant.Outlined"
                            @bind-Value="CurrentPersonQVamDto.V_Month"
                            @bind-Value:after="isDataChanged"
                            Min="1"
                            Max="12"
                            Immediate="true" />
                        </MudTooltip>

                        <!-- فیلد سال -->

                        <MudTooltip Text="لطفاً یک سال معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                            <MudNumericField T="int" Variant="Variant.Outlined"
                            @bind-Value="CurrentPersonQVamDto.V_Year"
                            @bind-Value:after="isDataChanged"
                            Min="1300"
                            Max="1499"
                                             Style="width:100px"
                            Immediate="true" />
                        </MudTooltip>

                    </div>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <div style="width:100%;">
                        <MudTooltip Text="لطفاً مبلغ وام را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                            <MudNumericField T="long" Label="مبلغ وام" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="ریال"
                            For="@(() => CurrentPersonQVamDto.Mblg)"
                            @bind-Value="CurrentPersonQVamDto.Mblg"
                            @bind-Value:after="isDataChanged"
                            Format="###,###"
                            HideSpinButtons="true" />
                        </MudTooltip>
                    </div>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect T="char" @bind-Value="CurrentPersonQVamDto.TypeVam" @bind-Value:after="isDataChanged" Label="نوع وام" Variant="Variant.Outlined" Class="w-100">
                        <MudSelectItem Value="'1'">عـادی</MudSelectItem>
                        <MudSelectItem Value="'2'">ضروری</MudSelectItem>
                    </MudSelect>
                </MudItem>

            </MudGrid>

            <div style="display: flex;">
                <MudButton style="width:33%" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Disabled="!isValidFnc" OnClick="SavePerson">ذخیره</MudButton>
                <MudButton style="width:33%" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Tertiary" OnClick="CancelEdit">لغو</MudButton>
                <MudButton style="width:34%; height: 40px; white-space: normal; line-height: 1;" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SpeakerNotes" IconColor="Color.Warning" OnClick="TogglePersonList">
                    @(ShowPersonList ? "عدم نمایش درخواستها" : "نمایش درخواستها")
                </MudButton>
            </div>
        </MudForm>


        <MudSpacer />
    </MudPaper>
    @if (ShowPersonList)
    {
        <MudTable T="PersonQVamDto" Items="@_personQVamList" Filter="new Func<PersonQVamDto,bool>(FilterFunction)" Hover=" true" Bordered="true" Striped="true" Dense="true">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString1" Placeholder="جستجوی سپرده گذار" Immediate="true" OnKeyUp="OnSearchTextChanged" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>

                <MudTh Style="width: 250px"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonQVamDto, object>(x=>x.FullName)"></MudTableSortLabel> نـــام ونام خانوادگی</MudTh>
                <MudTh Style="width: 130px;"><MudTableSortLabel SortBy="new Func<PersonQVamDto, object>(x=>x.HesabNo)"></MudTableSortLabel>ش.حساب</MudTh>
                <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<PersonQVamDto, object>(x=>x.ReqNo)"></MudTableSortLabel>ش.تقاضا</MudTh>
                <MudTh Style="width: 75px;"><MudTableSortLabel SortBy="new Func<PersonQVamDto, object>(x=>x.Date)"></MudTableSortLabel>تاریخ</MudTh>
                <MudTh Style="width: 75px;"><MudTableSortLabel SortBy="new Func<PersonQVamDto, object>(x=>x.Mblg)"></MudTableSortLabel>مبلغ وام</MudTh>
                <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<PersonQVamDto, object>(x=>x.V_isEditableDesc)"></MudTableSortLabel>وضعیت</MudTh>
                <MudTh>عملیات</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.FullName</MudTd>
                <MudTd>@context.HesabNo</MudTd>
                <MudTd>@context.ReqNo</MudTd>
                <MudTd>@context.Date</MudTd>
                <MudTd>@string.Format("{0:N0}", context.Mblg)</MudTd>
                <MudTd>@context.V_isEditableDesc</MudTd>
                <MudTd>
                    <MudFab title="اصلاح" Size="Size.Medium" Color="Color.Tertiary" Disabled="!(context.isEditable ?? false)" StartIcon="@Icons.Material.Filled.Edit" IconSize="Size.Medium" Class="ma-2" OnClick="() => EditPersonQVam(context)" />
                    <MudFab title="حـذف" Size="Size.Medium" Color="Color.Secondary" Disabled="!(context.isEditable ?? false)" StartIcon="@Icons.Material.Filled.Delete" IconSize="Size.Medium" Class="ma-2" OnClick="() => OpenDeleteDialog(context)" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                RowsPerPageString="@rowsPerPageString"
                InfoFormat="@infoFormat"
                AllItemsText="@allItemsText"
                HorizontalAlignment="@horizontalAlignment" />
            </PagerContent>
        </MudTable>
    }




</MudContainer>

@code {
    private MudTextField<int> myTextField;
    private List<PersonQVamDto> _personQVamList = new List<PersonQVamDto>();
    //   private List<PersonDto> _personList = new List<PersonDto>();
    //   private List<PersonAccountDto> _personAccountList = new List<PersonAccountDto>();
    private List<PersonFullDataDto> _personFullDataList = new List<PersonFullDataDto>();
    private PersonQVamDto CurrentPersonQVamDto = new PersonQVamDto();
    //   private PersonAccountDto CurrentPersonQVamDto = new PersonAccountDto();
    private string? PCodeSearchable = string.Empty;

    private bool isNeedUpdate { get; set; } = false;
    private bool isDataCorrected { get; set; } = false;

    private PersonFullDataDto selectedPerson;
    private Qvam OriginalQVam = new Qvam();//  ذخیره مقادیر حالت اصلاح حساب
    private int ReqNoSearchable = 0;

    private bool isEditing = false;
    // private bool isValid = false;
    // private bool isDateValid = false;
    private MudForm PersonsQVamForm;
    private string? searchString1 = string.Empty;
    private Person person = new Person();
    //   private Person1 person1 = new Person1();
    private bool isFormValid;
    private bool ShowPersonList = false;
    private string cDateShamsi;
    ///
    /// </summary> /////////////////////////////////////////////////////////////
    ///
    // private Person1 selectedPerson;
    //Pagination Variables
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right; private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    private int pageSize = 10;
 //   private int currentPage = 0;
    private List<tblDate> _tblDate = new List<tblDate>();
    //   private readonly DateService _dateService;
    protected override async Task OnInitializedAsync()

    {
        try
        {
            if (PersonsQVamForm != null)
            {
                // isFormValid = form.IsValid;
            }
            // var dateService = new DateService(_Db); // فرض می‌کنیم _Db به درستی تعریف شده است.
            //  var cc = DateService.TblDate.Count();
            _tblDate = DateService.TblDate;
            pageSize =  _Db.Qvams.Count();
            var query = (from Qvam in _Db.Qvams
                         join person in _Db.Persons on Qvam.Pcode equals person.Code
                         join hesab in _Db.Hesabs on person.Code equals hesab.Pcode
                         orderby Qvam.ReqNo, person.Family
                         select new PersonQVamDto
                             {
                                 FullName = person.FullName,
                                 Pcode = (string.IsNullOrEmpty(Qvam.Pcode) ? person.Code : Qvam.Pcode),
                                 ReqNo = Qvam.ReqNo,
                                 Date = Qvam.Date,
                                 Mblg = Qvam.Mblg,
                                 Status = Qvam.Status,
                                 HesabNo = hesab.HesabNo,
                                 V_Day = Qvam.V_Day,
                                 V_Month = Qvam.V_Month,
                                 V_Year = Qvam.V_Year,
                                 V_TypeVamDesc = Qvam.V_TypeVamDesc,
                                 isEditable = Qvam.Status == '0'
                             }).ToList();  // تبدیل به لیست

            if (query != null && query.Any())
            {
                _personQVamList = query;
            }

            _personFullDataList = _Db.vwPersonFullData.AsNoTracking().Where(v => v.Code != "00000" && v.Code != "00100") // شرط‌های دلخواه
                                     .Select(v => new PersonFullDataDto
                                           {
                                             FullNameWCode = string.IsNullOrWhiteSpace(v.MelliCode)
                                                                               ? v.FullName + "حساب : " + v.HesabNo
                                                                               : v.FullName + "حساب : " + v.HesabNo + " کدملی : " + v.MelliCode,
                                             FullName = v.FullName,
                                             HesabNo = v.HesabNo,
                                             Code = v.Code   
                                           })
                                     .Distinct()
                                     .ToList();



            var record = _tblDate.FirstOrDefault(d => d.GDate == DateTime.Now.Date); // مقایسه فقط تاریخ بدون زمان
            cDateShamsi = record?.HDate; // اگر record null باشد، cDateShamsi هم null خواهد بود

            ShowClearQVamInfo();
        }
        catch (SqlException ex)
        {
            Console.WriteLine("SQL Error: " + ex.Message);
            Console.WriteLine("Error Code: " + ex.Number);
            _logger.LogError(ex, $"خطای sql: {ex.Message}");
        }
        catch (HttpRequestException ex)
        {
            _logger.LogError(ex, "خطای غیرمنتظره در کامپوننت MyComponent.");

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"خطای عمومی: {ex.Message}");

        }

    }

    // لیستی از اشخاص به عنوان داده‌های نمونه

    private Task<IEnumerable<PersonFullDataDto>> SearchPerson(string value, CancellationToken cancellationToken)
    {
        // فیلتر کردن داده‌ها بر اساس ورودی کاربر
        var result = _personFullDataList.Where(c => !string.IsNullOrEmpty(c.FullNameWCode) && !string.IsNullOrEmpty(value)
                             && TextHelper.NormalContain(c.FullNameWCode, value)).OrderBy(c => c.HesabNo);

        // با توجه به CancellationToken می‌توانیم عملیات لغو را کنترل کنیم
        cancellationToken.ThrowIfCancellationRequested();

        // بازگشت نتایج به صورت AsEnumerable
        return Task.FromResult(result.AsEnumerable());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // اینجا فرم را اعتبارسنجی می‌کنیم
            isFormValid = PersonsQVamForm.IsValid;
            StateHasChanged(); // به‌روزرسانی UI پس از تغییر وضعیت
        }
        isFormValid = PersonsQVamForm.IsValid;
    }

    private async Task SubmitForm()
    {
        // اگر فرم معتبر بود، اطلاعات را ارسال یا پردازش کنید
        if (PersonsQVamForm.IsValid)
        {
            // به عنوان مثال، نمایش داده‌ها در کنسول


            // اینجا می‌توانید داده‌ها را به API ارسال کنید یا هر عملیات دیگری انجام دهید

            // برای مثال ارسال به یک سرویس یا API:
            // await ApiService.SendDataAsync(person);

            // پس از ارسال، می‌توانید پیامی نشان دهید
            _snackBar.Add("اطلاعات با موفقیت ارسال شد", Severity.Success);
        }
        else
        {
            // در صورت عدم اعتبار فرم، پیام خطا نشان دهید
            _snackBar.Add("لطفاً تمامی فیلدهای مورد نیاز را پر کنید.", Severity.Error);
        }
    }

    private void TogglePersonList()
    {
        ShowPersonList = !ShowPersonList;
        if (PersonsQVamForm.IsTouched)
        {
            var i = 1;
        }
    }

    private void SavePerson()
    {
        try
        {
            if (CurrentPersonQVamDto.isEditable == true)
            {
                if (isEditing)
                {
                    var editqvam = _Db.Qvams.FirstOrDefault(p => p.ReqNo == ReqNoSearchable);
                    editqvam.ReqNo = ReqNoSearchable;
                    editqvam.Pcode = CurrentPersonQVamDto.Pcode;
                    editqvam.Date = CurrentPersonQVamDto.Date;
                    editqvam.Mblg = CurrentPersonQVamDto.Mblg;
                    editqvam.Type = CurrentPersonQVamDto.TypeVam;
                }
                else
                {
                    if (_Db.vwPersonLastGst.Any(p => p.Code == PCodeSearchable) == true)
                    {
                        isNeedUpdate = false;
                        CancelEdit();
                        _snackBar.Add($" این سپرده گذار وام تسویه نشده دارد امکان وام جدید نیست ", Severity.Warning);

                        return ;
                    }
                    else
                    {
                        CurrentPersonQVamDto.Pcode = PCodeSearchable;
                    }
                    CurrentPersonQVamDto.Sabtdate = cDateShamsi;
                    CurrentPersonQVamDto.FullName = selectedPerson.FullName;
                    CurrentPersonQVamDto.HesabNo = selectedPerson.HesabNo;
                    var newQvam = Mapper.Map<Qvam>(CurrentPersonQVamDto); // Mapping DTO to Entity
                    _personQVamList.Add(CurrentPersonQVamDto);
                    // newQvam.Sabtdate = newQvam.Date;
                    _Db.Qvams.Add(newQvam);
                    _snackBar.Add($"تقاضای {CurrentPersonQVamDto.ReqNo} ثبت شد", Severity.Success);
                }
                _Db.SaveChangesAsync();
                isNeedUpdate = false;
            }
            else
            {
                _snackBar.Add($" تقاضای وام {CurrentPersonQVamDto.ReqNo} پرداخت شده است مجاز به اصلاح نیستید ", Severity.Warning);
                FillPersonQVamInfo(Mapper.Map<PersonQVamDto>(OriginalQVam));// Qvam میدی QvamDto برمیگرده

                isNeedUpdate = false;
            }

            //   ShowClearQVamInfo();

        }
        catch (DbUpdateException ex)
        {
            // اینجا خطاهایی که مربوط به مشکلات ذخیره‌سازی در پایگاه داده هستند مدیریت می‌شود
            // مثلاً خطاهای مربوط به نقض محدودیت‌های پایگاه داده مانند unique constraint

            // به کاربر پیام خطای مناسب نمایش داده می‌شود

            _logger.LogError(ex, "خطایی در ذخیره‌سازی داده‌ها به پایگاه داده رخ داد.");
        }


    }

    private void EditPersonQVam(PersonQVamDto personqvamdto)
    {
        // CurrentPersonQVamDto = Mapper.Map<PersonQVamDto>(personqvamdto);
        CurrentPersonQVamDto = _personQVamList.FirstOrDefault(p => p.ReqNo == personqvamdto.ReqNo) ?? new PersonQVamDto();
        OriginalQVam = _Db.Qvams.FirstOrDefault(p => p.ReqNo == personqvamdto.ReqNo) ?? new Qvam();// یک کپی برای کنترل تغییرات
        ReqNoSearchable = personqvamdto.ReqNo;
        if (selectedPerson == null) { selectedPerson = new PersonFullDataDto(); }
        selectedPerson.FullNameWCode = personqvamdto.FullName + " کد : " + personqvamdto.Pcode;
        selectedPerson.FullName = personqvamdto.FullName;
        selectedPerson.Code = personqvamdto.Pcode;
        selectedPerson.HesabNo = personqvamdto.HesabNo;
        selectedPerson.QReqNo = personqvamdto.ReqNo;
        FillPersonQVamInfo(personqvamdto);
        //   selectedPerson = _personFullDataList.FirstOrDefault(p => p.Code == personqvamdto.Pcode) ?? new PersonFullDataDto();
        isEditing = true;
        isNeedUpdate = false;
        isDataCorrected = true;
        myTextField.FocusAsync();
    }

    private async Task CancelEdit()
    {
        if (isNeedUpdate)
        {
            var dialogContext = "";
            dialogContext = "اطلاعات تغییرکرده !!! برای لغو مطمئن هستید ؟";
            // اینجا باید یک دیالوگ برای تایید حذف باز کنیم
            var parameters = new DialogParameters
            {
                {nameof(Shared.Dialogs.DeleteConfirmationDialog.ContextText), dialogContext}
            };

            var dialog = DialogService.Show<DeleteConfirmationDialog>("اخطار تغییر", parameters);
            var result = await dialog.Result;
            if (result?.Canceled == true)
            {
                return;
            }
        }
        CurrentPersonQVamDto = new PersonQVamDto();
        isEditing = false;
        isNeedUpdate = false;
        ShowClearQVamInfo();
    }
    private async Task OpenDeleteDialog(PersonQVamDto context)
    {
        var deleteContext = context.FullName;
        deleteContext = " برای حذف تقاضای " + deleteContext + " مطمئن هستید؟ ";
        // اینجا باید یک دیالوگ برای تایید حذف باز کنیم
        var parameters = new DialogParameters
    {
        { nameof(Shared.Dialogs.DeleteConfirmationDialog.ContextText), deleteContext }
    };

        var dialog = DialogService.Show<DeleteConfirmationDialog>("حذف تقاضا", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // اگر کاربر گزینه Yes را انتخاب کرده باشد، عملیات حذف انجام می‌شود
                ReqNoSearchable = context.ReqNo;
                var qvamToRemove = _personQVamList.FirstOrDefault(p => p.ReqNo == ReqNoSearchable);

                if (qvamToRemove != null)
                {
                    ///  حذف درخواست اتوماتیک وام
                    var QvamItem = await _Db.Qvams.FirstOrDefaultAsync(p => p.ReqNo == context.ReqNo);
                    if (QvamItem != null)
                    {
                        _Db.Remove(QvamItem);

                    }
                    _personQVamList.Remove(context);
                    CancelEdit();

                    // await _Db.SaveChangesAsync();  // اطمینان از اجرای غیرهمزمان
                    _snackBar.Add($" تقاضای وام {qvamToRemove.FullName} حذف شد ", Severity.Warning);
                    _Db.SaveChanges();
                }
                else
                {
                    // شخصی با این ID در لیست پیدا نشد
                    _snackBar.Add("رکوردی با این شناسه پیدا نشد.", Severity.Error);
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine("SQL Error: " + ex.Message);
                Console.WriteLine("Error Code: " + ex.Number);
                _logger.LogError(ex, $"خطای sql: {ex.Message}");
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError(ex, "خطای غیرمنتظره در کامپوننت MyComponent.");

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"خطای عمومی: {ex.Message}");

            }
        }
    }

    private void OnPCodeChanged()
    {
        if (selectedPerson != null && selectedPerson.Code != null)
        {
            PCodeSearchable = selectedPerson.Code;
            CurrentPersonQVamDto.Pcode = PCodeSearchable;
            var Per = _personQVamList.FirstOrDefault(p => p.Pcode == PCodeSearchable && p.Status == '0');
            if (Per != null)
            {
                ReqNoSearchable = Per.ReqNo;
                FillPersonQVamInfo(Per);
                CurrentPersonQVamDto.isEditable = true;
                isEditing = true;
                isNeedUpdate = false;
                isDataCorrected = true;
              //  OnReqNoChanged();
            }
            

        }
        //  isValid = ValidateForm();
    }
    private void OnReqNoChanged()
    {
        ///
        ///    کنترل اینکه درخواست تکراری نباشد
        ///
        var personQVam = _personQVamList.FirstOrDefault(p => p.ReqNo == ReqNoSearchable);
        if (personQVam != null)
        {
            var Pcode = personQVam.Pcode;
            if (Pcode != PCodeSearchable)
            {
                ReqNoSearchable = personQVam.ReqNo;
                PCodeSearchable = personQVam.Pcode;
                if (selectedPerson == null) { selectedPerson = new PersonFullDataDto(); }
                selectedPerson.Code = PCodeSearchable;
                selectedPerson.FullNameWCode = personQVam.FullName + " کد : " + personQVam.Pcode;
                selectedPerson.FullName = personQVam.FullName;
                FillPersonQVamInfo(personQVam);
                isNeedUpdate = false;
                isEditing = true;
                isDataCorrected = ValidateForm();
                //  _snackBar.Add($" حساب متعلق به {personAccount.FullName} می باشد", Severity.Warning);
                //  HesabNoSearchable = CurrentPersonAccountDto.HesabNo;
            }
        }
        else
        {
            if (selectedPerson == null)
            {
                _snackBar.Add(" سپرده گذار انتخاب کنید", Severity.Warning);
            }
            else
            {
                CurrentPersonQVamDto.ReqNo = ReqNoSearchable;
                CurrentPersonQVamDto.isEditable = true;
                isDataCorrected = ValidateForm();
                if (OriginalQVam.ReqNo != ReqNoSearchable) isNeedUpdate = true;
            }
        }
        

    }
    // متدی برای دریافت پیغام خطا از داده‌های وارد شده
    private string GetErrorMessageForField(string fieldName)
    {
        var context = new ValidationContext(CurrentPersonQVamDto);
        var validationResults = new List<ValidationResult>();

        // اعتبارسنجی فیلد خاص

        Validator.TryValidateProperty(
            typeof(PersonQVamDto).GetProperty(fieldName).GetValue(CurrentPersonQVamDto),
            new ValidationContext(CurrentPersonQVamDto) { MemberName = fieldName },
            validationResults);


        // اگر خطا وجود دارد، پیغام خطا را برمی‌گرداند
        return validationResults.Any() ? validationResults.First().ErrorMessage : string.Empty;
    }

    // private bool FilterFunction(Person _person) => FilterFunc(_person, searchString1);
    private bool FilterFunction(PersonQVamDto _personQVamList)
    {
        // بررسی null بودن searchString1
        if (string.IsNullOrEmpty(searchString1))
        {
            // اگر searchString1 null یا خالی بود، می‌توانید نتیجه دلخواه را برگردانید یا بررسی کنید.
            return true; // یا هر عمل دیگری که مناسب است
        }

        return FilterFunc(_personQVamList, searchString1);
    }

    private bool FilterFunc(PersonQVamDto _perQvam, string searchString)
    {
        if (_perQvam is null) return false;
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (!string.IsNullOrEmpty(_perQvam.FullName) && TextHelper.NormalContain(_perQvam.FullName, searchString))
            return true;
        if ($"{_perQvam.Pcode} {_perQvam.ReqNo} {_perQvam.HesabNo} {_perQvam.Mblg} {_perQvam.Date}".Contains(searchString))
            return true;

        return false;
    }
    private void OnSearchTextChanged()
    {
        if (!string.IsNullOrEmpty(searchString1))
        {
            searchString1 = TextHelper.NormalizeSimpleString(searchString1);
        }
    }
    // اعتبارسنجی مدل
    private bool ValidateModel()
    {
        var context = new ValidationContext(CurrentPersonQVamDto);
        var validationResults = new List<ValidationResult>();
        return Validator.TryValidateObject(CurrentPersonQVamDto, context, validationResults, true);
    }
    // متدی برای ارسال فرم
    // اعتبارسنجی مدل
    private bool isValidFnc => ValidateForm();

    private bool ValidateForm()
    {
        // پرکردن فیلد تاریخ
        CurrentPersonQVamDto.Date = DateService.DateShamsiFormat(CurrentPersonQVamDto.V_Year, CurrentPersonQVamDto.V_Month, CurrentPersonQVamDto.V_Day);
        //isDataCorrected = false;
        // مثال: اعتبارسنجی یک فرم
        if (selectedPerson == null) return false;
        if (CurrentPersonQVamDto.Pcode == null) return false;
        if (CurrentPersonQVamDto.Mblg <= 0) return false;
        if (CurrentPersonQVamDto.ReqNo == 0) return false;
        if (!DateService.isDateValid(CurrentPersonQVamDto.Date)) return false;
        //  if (!_tblDate.Any(d => d.HDate == CurrentPersonQVamDto.Date)) return false;
        isDataCorrected = ValidateModel();
        if (!isDataCorrected) return false;
        //    if (!_Db.tblDates.Any(p => p.HDate == CurrentPersonQVamDto.Date)) return false;

        return isNeedUpdate;
    }
    private void ShowClearQVamInfo()
    {
        ReqNoSearchable = 0;
        //PCodeSearchable = "";
        Mapper.Map(new PersonQVamDto(), CurrentPersonQVamDto);
        ///
        ///تاریخ با روز جاری پرمیشود
        ///

        CurrentPersonQVamDto.V_Year = DateService.GetHYear(cDateShamsi);
        CurrentPersonQVamDto.V_Month = DateService.GetHMonth(cDateShamsi);
        CurrentPersonQVamDto.V_Day = DateService.GetHDay(cDateShamsi);
        CurrentPersonQVamDto.Date = cDateShamsi;
        CurrentPersonQVamDto.FullName = "";
        CurrentPersonQVamDto.TypeVam = '1';
        CurrentPersonQVamDto.Mblg = 0;
        ReqNoSearchable = _personQVamList.Max(p => p.ReqNo) + 1;
        CurrentPersonQVamDto.ReqNo = ReqNoSearchable;
        selectedPerson = null;
        OriginalQVam.Date = cDateShamsi;
        OriginalQVam.Pcode = PCodeSearchable;

    }

    private void FillPersonQVamInfo(PersonQVamDto personToAdd)
    {

        //   Mapper.Map(personToAdd, CurrentPersonQVamDto);
        CurrentPersonQVamDto = Mapper.Map<PersonQVamDto>(personToAdd);
        CurrentPersonQVamDto.FullName = personToAdd.FullName;
        CurrentPersonQVamDto.Pcode = personToAdd.Pcode;
        CurrentPersonQVamDto.HesabNo = personToAdd.HesabNo;
        CurrentPersonQVamDto.ReqNo = personToAdd.ReqNo;
        CurrentPersonQVamDto.Mblg = personToAdd.Mblg;
        CurrentPersonQVamDto.Sabtdate = personToAdd.Sabtdate;
        CurrentPersonQVamDto.isEditable = personToAdd.isEditable;
        CurrentPersonQVamDto.Date = personToAdd.Date;
        CurrentPersonQVamDto.TypeVam = personToAdd.TypeVam;
        CurrentPersonQVamDto.V_Year = personToAdd.V_Year;
        CurrentPersonQVamDto.V_Month = personToAdd.V_Month; 
        CurrentPersonQVamDto.V_Day = personToAdd.V_Day;
        CurrentPersonQVamDto.Date = DateService.DateShamsiFormat(CurrentPersonQVamDto.V_Year, CurrentPersonQVamDto.V_Month, CurrentPersonQVamDto.V_Day);


        OriginalQVam.Pcode = CurrentPersonQVamDto.Pcode;
        OriginalQVam.FullName = CurrentPersonQVamDto.FullName;
        OriginalQVam.ReqNo = CurrentPersonQVamDto.ReqNo;
        OriginalQVam.Date = CurrentPersonQVamDto.Date;
        OriginalQVam.Mblg = CurrentPersonQVamDto.Mblg;
        OriginalQVam.Type = CurrentPersonQVamDto.TypeVam;


    }
    private void isDataChanged()
    {
        isNeedUpdate = false;
        CurrentPersonQVamDto.Date = DateService.DateShamsiFormat(CurrentPersonQVamDto.V_Year, CurrentPersonQVamDto.V_Month, CurrentPersonQVamDto.V_Day);
        if (OriginalQVam.ReqNo != CurrentPersonQVamDto.ReqNo) isNeedUpdate = true;
        if (OriginalQVam.Date != CurrentPersonQVamDto.Date) isNeedUpdate = true;
        if (OriginalQVam.Mblg != CurrentPersonQVamDto.Mblg) isNeedUpdate = true;
        if (OriginalQVam.Type != CurrentPersonQVamDto.TypeVam) isNeedUpdate = true;
        if (OriginalQVam.FullName != CurrentPersonQVamDto.FullName) isNeedUpdate = true;
        if (OriginalQVam.ReqNo != CurrentPersonQVamDto.ReqNo) isNeedUpdate = true;

    }
}