@page "/pagepvam"

@inject DatabaseContext _Db
@inject DateService DateService
@inject ILogger<PagePVam> _logger
@inject VamBlazor.Client.Application.Services.PersonServices PersonServices
@inject IMapper Mapper
@inject NavigationManager Navigation
@inject IDialogService DialogService
@layout MainLayout
@inject DtoComparer comparer

@using AutoMapper
@using System.ComponentModel.DataAnnotations
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging
@using Serilog
@using Serilog.Core
@using System.Data
@using VamBlazor.Client.Application.Dto_Utilities
@using VamBlazor.Client.Domain.Entities
@using VamBlazor.Client.Domain.Enum
@using VamBlazor.Client.Application.Dtos
@using VamBlazor.Client.Application.Mappings
@using VamBlazor.Client.Application.CommonFunc
@using VamBlazor.Client.Shared.Dialogs
@using VamBlazor.Client.Application.Services

<MudContainer style="font-family:'Vazir UI'">
    <MudGrid Justify="Justify.Center" AlignItems="Center" Style="height: 100vh;">
        <MudItem xs="12" sm="6">
            <MudPaper Class="half-width" Style="width: 100%; margin: 0 auto">
                <!-- MudForm برای مدیریت فرم و اعتبارسنجی -->
                <MudText Typo="Typo.body2" Align="Align.Center" Style="height:25px;background-color:cadetblue" Class="mt-2">پرداخت وام به متقاضیان</MudText>
                <MudForm @ref="PersonsPVamForm" Model="@CurrentPersonPVamDto" @bind-IsValid="isDataCorrected" Spacing="16" Class="p-4">

                    <MudGrid>
                        <MudItem xs="12">
                            <MudAutocomplete T="PersonFullDataDto"
                            Label="لطفا سپرده گذار را انتخاب کنید ..."
                            @bind-Value="selectedPerson"
                            SearchFunc="@SearchPerson"
                            ToStringFunc="@(_personFullDataList => _personFullDataList?.FullNameWCode ?? "")"
                            Dense="true" Clearable
                            OnBlur="OnPCodeChanged"
                            ItemTemplate="@ItemTemplate"
                            MaxItems="50"
                            ShowProgressIndicator="true" />

                        </MudItem>
                        <!-- ردیف دوم: ReqNo & Date -->

                        <MudItem xs="12" sm="6">
                            <!--  <MudBadge>
                            <MudIcon Icon="@Icons.Material.Filled.Star" />
                            </MudBadge> -->
                            <div class="mt-n6" style="display: flex;font-size: 18px; font-weight: bold;">
                                <MudTextField T="int" Style="justify-content:right;width:65%" @ref="myTextField"
                                Label="شماره وام"
                                Required
                                @bind-Value="@ReqNoSearchable" @bind-Value:after="isDataChanged"
                                InputType="InputType.Text"
                                Format="###"
                                OnBlur="OnReqNoChanged"/>
                            </div>
                        </MudItem>
                        @if (MandehVam != 0 || isEditing)
                        {
                            <MudItem xs="12" sm="6">
                                <div class="mt-n8" style="display: flex;font-weight: bold">
                                    @if (MandehVam != 0)
                                    {
                                        <MudNumericField T="long" Label="مانده وام"
                                        @bind-Value="MandehVam"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.End" AdornmentText="ریال"
                                        style="font-size: 20px; font-weight: bold;color:red"
                                        Format="###,###"
                                        ReadOnly />
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.h6" Class="mt-2 ml-0" Style="border: 1px solid #1976d2; padding: 8px 12px; border-radius: 4px; display: inline-block;background-color:lightgreen">
                                            وام تـســویه شــده اســت
                                        </MudText>
                                    }
                                </div>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12" sm="6">
                            </MudItem>
                        }
                        <!-- ردیف دوم -->
                        <MudItem xs="12" sm="6">
                            <div class="mt-n8" style="display: flex;font-size: 16px; font-weight: bold;">
                                <MudTooltip Text="لطفاً مبلغ وام را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="long?" Label="مبلغ وام"
                                    @bind-Value="CurrentPersonPVamDto.Mblgvam"
                                    @bind-Value:after="isDataChanged"
                                    Variant="Variant.Outlined"
                                    Adornment="Adornment.End" AdornmentText="ریال"
                                    For="@(() => CurrentPersonPVamDto.Mblgvam)"
                                    Format="###,###"
                                    OnBlur="() => CalculateVaminfo(1)"
                                    HideSpinButtons="true" />
                                </MudTooltip>
                            </div>
                        </MudItem>
                        <MudItem xs="2" sm="1" class="mt-n6 ">
                            <MudPaper Elevation="0">
                                <MudText Style="text-align:center;"> تاریخ وام</MudText>
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="10" sm="5">
                            <div class="mt-n6 " style="display: flex;font-size: 16px; font-weight: bold;">

                                <!-- فیلد روز -->

                                <MudTooltip Text="لطفاً یک روز معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int" Variant="Variant.Outlined"
                                    @bind-Value="V_DayD"
                                    @bind-Value:after="isDataChanged"
                                    Style="font-size:14px"
                                    Min="1"
                                    Max="31"
                                    Immediate="true" />
                                </MudTooltip>

                                <!-- فیلد ماه -->

                                <MudTooltip Text="لطفاً یک ماه معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int" Variant="Variant.Outlined"
                                    @bind-Value="V_MonthD"
                                    @bind-Value:after="isDataChanged"
                                    Style="font-size:14px"
                                    Min="1"
                                    Max="12"
                                    Immediate="true" />
                                </MudTooltip>

                                <!-- فیلد سال -->

                                <MudTooltip Text="لطفاً یک سال معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int" Variant="Variant.Outlined"
                                    @bind-Value="V_YearD"
                                    @bind-Value:after="isDataChanged"
                                    Style="width:80px"
                                    Min="1300"
                                    Max="1499"
                                    Immediate="true" />
                                </MudTooltip>

                            </div>
                        </MudItem>
                        <MudItem xs="2" sm="2" md="2" class="mt-0 py-4 px-0 ">
                            <MudPaper Elevation="0">
                                <MudText Style="text-align:right;height:25px;"> تعداد اقساط</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="2" sm="1" md="1" class="mt-0 ml-4 px-0 mr-n2">
                            <MudPaper Elevation="0" class="ml-n4 mr-1">
                                <MudTextField T="byte?"
                                @bind-Value="CurrentPersonPVamDto.GstNo"
                                @bind-Value:after="isDataChanged"
                                class="mt-n6 px-n4"
                                OnBlur="() => CalculateVaminfo(2)"
                                Variant="Variant.Outlined" />
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="8" sm="2" md="2" class="mt-0 py-0 px-0 ">
                            <MudText Style="text-align:right;height:25px;"></MudText>
                        </MudItem>
                        <MudItem xs="5" sm="2" md="2" class="mt-0 py-0 pl-4 ml-n2 ">
                            <MudPaper Elevation="0">
                                <MudText Style="text-align:left;"> سررسید قسط اول </MudText>
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="7" sm="5" class="mt-0 py-0 px-0  pl-6">
                            <div style="display: flex;font-size: 16px; font-weight: bold;">

                                <!-- فیلد روز -->

                                <MudTooltip Text="لطفاً یک روز معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int" Variant="Variant.Outlined"
                                    @bind-Value="V_DayG"
                                    @bind-Value:after="isDataChanged"
                                    Style="font-size:14px"
                                    Min="1"
                                    Max="31"
                                    Immediate="true" />
                                </MudTooltip>

                                <!-- فیلد ماه -->

                                <MudTooltip Text="لطفاً یک ماه معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int" Variant="Variant.Outlined"
                                    @bind-Value="V_MonthG"
                                    @bind-Value:after="isDataChanged"
                                    Style="font-size:14px"
                                    Min="1"
                                    Max="12"
                                    Immediate="true" />
                                </MudTooltip>

                                <!-- فیلد سال -->

                                <MudTooltip Text="لطفاً یک سال معتبر وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int" Variant="Variant.Outlined"
                                    @bind-Value="V_YearG"
                                    @bind-Value:after="isDataChanged"
                                    Min="1300"
                                    Max="1499"
                                    Style="width:80px"
                                    Immediate="true" />
                                </MudTooltip>

                            </div>
                        </MudItem>


                        <MudItem xs="6" sm="6" class="py-0 pl-4 ml-n2 ">
                            <div style="width:100%;">
                                <MudTooltip Text="لطفاً مبلغ قسط آخر را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="long?" Label="مبلغ قسط آخر"
                                    @bind-Value="CurrentPersonPVamDto.Gst2"
                                    @bind-Value:after="isDataChanged"
                                    Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="ریال"
                                    For="@(() => CurrentPersonPVamDto.Gst2)"
                                    OnBlur="() => CalculateVaminfo(3)"
                                    Format="###,###"
                                    HideSpinButtons="true" />
                                </MudTooltip>
                            </div>
                        </MudItem>
                        <MudItem xs="6" sm="6" class="py-0 pl-4 ml-n2 ">
                            <div style="width:100%;">
                                <MudTooltip Text="لطفاً مبلغ سایراقساط را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="long?" Label="مبلغ اقساط"
                                    @bind-Value="CurrentPersonPVamDto.Gst1"
                                    @bind-Value:after="isDataChanged"
                                    Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="ریال"
                                    For="@(() => CurrentPersonPVamDto.Gst1)"
                                    OnBlur="() => CalculateVaminfo(4)"
                                    Format="###,###"
                                    HideSpinButtons="true" />
                                </MudTooltip>
                            </div>
                        </MudItem>
                        <MudItem xs="6" sm="6" class="mt-n1 py-0 pl-4 ml-n2 ">
                            <div style="width:100%;">
                                <MudTooltip Text="لطفاً درصد کارمزد را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int?" Label="درصد کارمزد" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="درصد"
                                    For="@(() => CurrentPersonPVamDto.Pkarmozd)"
                                    @bind-Value="CurrentPersonPVamDto.Pkarmozd"
                                    @bind-Value:after="isDataChanged"
                                    OnBlur="() => CalculateVaminfo(5)"
                                    Format="###,###"
                                    HideSpinButtons="true" />
                                </MudTooltip>
                            </div>
                        </MudItem>
                        <MudItem xs="6" sm="6" class="mt-n1 py-0 pl-4 ml-n2 ">
                            <div style="width:100%;">
                                <MudTooltip Text="لطفاً مبلغ کارمزد را وارد کنید" Placement="Placement.Top" Color="Color.Tertiary" Delay="1000">
                                    <MudNumericField T="int?" Label="مبلغ کارمزد" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="ریال"
                                    @bind-Value="CurrentPersonPVamDto.Mkarmozd"
                                    @bind-Value:after="isDataChanged"
                                    For="@(() => CurrentPersonPVamDto.Mkarmozd)"
                                    OnBlur="() => CalculateVaminfo(6)"
                                    Format="###,###"
                                    HideSpinButtons="true" />
                                </MudTooltip>
                            </div>
                        </MudItem>
                    </MudGrid>

                    <div style="display: flex;" class="mt-n12">
                        <MudButton style="width:33%" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Disabled="!isValidFnc" OnClick="SavePerson">ذخیره</MudButton>
                        <MudButton style="width:33%" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" IconColor="Color.Tertiary" OnClick="CancelEdit">لغو</MudButton>
                        <MudButton style="width:34%; height: 40px; white-space: normal; line-height: 1;" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SpeakerNotes" IconColor="Color.Warning" OnClick="TogglePersonList">
                            @(ShowPersonList ? "عدم نمایش درخواستها" : "نمایش درخواستها")
                        </MudButton>
                    </div>
                </MudForm>


                <MudSpacer />
            </MudPaper>
        </MudItem>
        @if (ShowPersonList)
        {
            <MudTable T="PersonPVamDto" Items="@_personPVamListFiltered" Filter="new Func<PersonPVamDto,bool>(FilterFunction)" Hover=" true" Bordered="true" Striped="true" Dense="true">
                <ToolBarContent>
                    <MudTextField @bind-Value="searchString1" Placeholder="جستجوی سپرده گذار" Immediate="true" OnKeyUp="OnSearchTextChanged" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Style="width: 250px"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonPVamDto, object>(x=>x.FullName)"></MudTableSortLabel> نـــام ونام خانوادگی</MudTh>
                    <MudTh Style="width: 120px;"><MudTableSortLabel SortBy="new Func<PersonPVamDto, object>(x=>x.HesabNo)"></MudTableSortLabel>حساب</MudTh>
                    <MudTh Style="width: 110px;"><MudTableSortLabel SortBy="new Func<PersonPVamDto, object>(x=>x.ReqNo)"></MudTableSortLabel>ش.وام</MudTh>
                    <MudTh Style="width: 75px;"><MudTableSortLabel SortBy="new Func<PersonPVamDto, object>(x=>x.DateD)"></MudTableSortLabel>تاریخ</MudTh>
                    <MudTh Style="width: 75px;"><MudTableSortLabel SortBy="new Func<PersonPVamDto, object>(x=>x.Mblgvam)"></MudTableSortLabel>مبـلـغ</MudTh>
                    <MudTh Style="width: 75px;"><MudTableSortLabel SortBy="new Func<PersonPVamDto, object>(x=>x.GstNo)"></MudTableSortLabel>تعدادقسط</MudTh>
                    <MudTh Style="width: 75px;"><MudTableSortLabel SortBy="new Func<PersonPVamDto, object>(x=>x.GstPay)"></MudTableSortLabel>پرداخت</MudTh>
                    <MudTh Style="width: 75px;"><MudTableSortLabel SortBy="new Func<PersonPVamDto, object>(x=>x.V_isEditableDesc)"></MudTableSortLabel>وضعیت</MudTh>
                    <MudTh>عملیات</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.FullName</MudTd>
                    <MudTd>@context.HesabNo</MudTd>
                    <MudTd>@context.ReqNo</MudTd>
                    <MudTd>@context.DateD</MudTd>
                    <MudTd>@string.Format("{0:N0}", context.Mblgvam)</MudTd>
                    <MudTd>@context.GstNo</MudTd>
                    <MudTd>@context.GstPay</MudTd>
                    <MudTd>@context.V_isEditableDesc</MudTd>
                    <MudTd>
                        <MudFab title="اصلاح" Size="Size.Small" Color="Color.Tertiary" Disabled="!(context.isEditable ?? false)" StartIcon="@Icons.Material.Filled.Edit" IconSize="Size.Medium" Class="ma-2" OnClick="() => EditPersonPVam(context)" />
                        <MudFab title="حـذف" Size="Size.Small" Color="Color.Secondary" Disabled="!(context.isEditable ?? false)" StartIcon="@Icons.Material.Filled.Delete" IconSize="Size.Medium" Class="ma-2" OnClick="() => OpenDeleteDialog(context)" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                    RowsPerPageString="@rowsPerPageString"
                    InfoFormat="@infoFormat"
                    AllItemsText="@allItemsText"
                    HorizontalAlignment="@horizontalAlignment" />
                </PagerContent>
            </MudTable>
        }

    </MudGrid>

</MudContainer>

@code {
    private MudTextField<int> myTextField;
    private List<PersonPVamDto> _personPVamList = new List<PersonPVamDto>();
    private List<PersonPVamDto> _personPVamListFiltered = new List<PersonPVamDto>();
    private long MandehVam = 0;
    //   private List<PersonDto> _personList = new List<PersonDto>();
    //   private List<PersonAccountDto> _personAccountList = new List<PersonAccountDto>();
    private List<PersonFullDataDto> _personFullDataList = new List<PersonFullDataDto>();
    private PersonPVamDto CurrentPersonPVamDto = new PersonPVamDto();
    //   private PersonAccountDto CurrentPersonPVamDto = new PersonAccountDto();
    private string? PCodeSearchable = string.Empty;

    private bool isNeedUpdate { get; set; } = false;
    private bool isDataCorrected { get; set; } = false;

    private PersonFullDataDto selectedPerson;
    private Pvam OriginalPVam = new Pvam();//  ذخیره مقادیر حالت اصلاح حساب
    private int ReqNoSearchable = 0;

    private bool isEditing = false;
    // private bool isValid = false;
    // private bool isDateValid = false;
    private MudForm PersonsPVamForm;
    private string? searchString1 = string.Empty;
    private Person person = new Person();
    //   private Person1 person1 = new Person1();
    private bool isFormValid;
    private bool ShowPersonList = false;
    private string? cDateShamsi = ""; private string? cDateShamsiNextMonth = "";
    ///
    /// </summary> /////////////////////////////////////////////////////////////
    ///
    // private Person1 selectedPerson;
    //Pagination Variables
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right; private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    private int pageSize = 10;
    //   private int currentPage = 0;
    private List<tblDate> _tblDate = new List<tblDate>();
    private int V_YearD; private int V_MonthD; private int V_DayD;
    private int V_YearG; private int V_MonthG; private int V_DayG;
    private bool lNeedToMakeGst = false;
    // private readonly DateService _dateService;
    protected override async Task OnInitializedAsync()

    {
        try
        {
            if (PersonsPVamForm != null)
            {
                // isFormValid = form.IsValid;
            }

            _tblDate = DateService.TblDate;
            pageSize = _Db.Pvams.Count();
            var query = (from Person in _Db.Persons
                         join Qvam in _Db.Qvams on Person.Code equals Qvam.Pcode
                         join Hesab in _Db.Hesabs on Person.Code equals Hesab.Pcode
                         join Pvam in _Db.Pvams on Qvam.ReqNo equals Pvam.ReqNo into PvamGroup
                         from Pvam in PvamGroup.DefaultIfEmpty()  // اینجا LEFT JOIN برای Pvam اعمال شده است
                         select new
                         {
                             FullName = Person.FullName,
                             Pcode = Person.Code,
                             HesabNo = Hesab.HesabNo,
                             ReqNoQ = Qvam.ReqNo,
                             MblgvamQ = Qvam.Mblg,
                             TypeQ = Qvam.Type,
                             ReqNoP = Pvam != null ? Pvam.ReqNo : 0,
                             Mblgvam = Pvam != null ? Pvam.Mblgvam : 0,  // اگر Pvam null باشد مقدار null می‌دهیم
                             Gst1 = Pvam != null ? Pvam.Gst1 : 0,
                             Gst2 = Pvam != null ? Pvam.Gst2 : 0,
                             Pkarmozd = Pvam != null ? Pvam.Pkarmozd : 0,
                             Mkarmozd = Pvam != null ? Pvam.Mkarmozd : 0,
                             GstNo = Pvam != null ? Pvam.GstNo : 0,
                             GstPay = Pvam != null ? Pvam.GstPay : 0,
                             DateD = Pvam != null ? Pvam.DateD : "",
                             DateG = Pvam != null ? Pvam.DateG : "",
                             Type = Pvam != null ? Pvam.Type : '1',
                             Status = Qvam.Status,
                             isEditable = (Pvam != null ? Pvam.GstPay : 0) == 0
                             // isEditable = !_Db.Dargsts.Any(p => p.ReqNo == (Pvam != null ? Pvam.ReqNo : 0))  // اگر Pvam null باشد، مقدار 0 به جای ReqNo استفاده می‌شود
                         }).ToList();  // تبدیل به لیست

            if (query != null && query.Any())
            {
                _personPVamList = query.Select(q => new PersonPVamDto
                    {
                        FullName = q.FullName,
                        Pcode = q.Pcode,
                        HesabNo = q.HesabNo,
                        ReqNo = q.ReqNoP,
                        Status = q.Status,
                        Mblgvam = q.Mblgvam,
                        Gst1 = q.Gst1,
                        Gst2 = q.Gst2,
                        Pkarmozd = q.Pkarmozd,
                        Mkarmozd = q.Mkarmozd,
                        GstNo = q.GstNo,
                        GstPay = q.GstPay,
                        DateD = q.DateD,
                        DateG = q.DateG,
                        isEditable = q.isEditable
                    }).OrderByDescending(q => q.ReqNo).ToList();
            }

            _personFullDataList = query.Select(q => new PersonFullDataDto
                {
                    FullName = q.FullName,
                    FullNameWCode = q.FullName + " شماره تقاضا " + q.ReqNoQ + " ش.حساب " + q.HesabNo + "",
                    Code = q.Pcode,
                    HesabNo = q.HesabNo,
                    Status = q.Status,
                    QReqNo = q.ReqNoQ,
                    PReqNo = q.ReqNoP,
                    Mblg = q.MblgvamQ,
                    Type = q.TypeQ
                }).OrderBy(p => p.FullName).ThenBy(p => p.QReqNo).ToList();

            var record = _tblDate.FirstOrDefault(d => d.GDate == DateTime.Now.Date); // مقایسه فقط تاریخ بدون زمان
            cDateShamsi = record?.HDate; // اگر record null باشد، cDateShamsi هم null خواهد بود
            var recordNextMonth = _tblDate.FirstOrDefault(d => d.GDate == DateTime.Now.AddMonths(1).Date); // مقایسه فقط تاریخ بدون زمان;
            cDateShamsiNextMonth = recordNextMonth?.HDate;
            cDateShamsiNextMonth = DateService.DateNextMonthShamsi(cDateShamsi);
            cDateShamsi = DateService.TodayHDate();
            ShowClearPVamInfo();
        }
        catch (SqlException ex)
        {
            Console.WriteLine("SQL Error: " + ex.Message);
            Console.WriteLine("Error Code: " + ex.Number);
            _logger.LogError(ex, $"خطای sql: {ex.Message}");
        }
        catch (HttpRequestException ex)
        {
            _logger.LogError(ex, "خطای غیرمنتظره در کامپوننت MyComponent.");

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"خطای عمومی: {ex.Message}");

        }

    }

    // لیستی از اشخاص به عنوان داده‌های نمونه

    private Task<IEnumerable<PersonFullDataDto>> SearchPerson(string value, CancellationToken cancellationToken)
    {
        // فیلتر کردن داده‌ها بر اساس ورودی کاربر
        var result = _personFullDataList.Where(c => !string.IsNullOrEmpty(c.FullNameWCode) && !string.IsNullOrEmpty(value)
                             && TextHelper.NormalContain(c.FullNameWCode, value)).OrderBy(c=>c.HesabNo);

        // با توجه به CancellationToken می‌توانیم عملیات لغو را کنترل کنیم
        cancellationToken.ThrowIfCancellationRequested();

        // بازگشت نتایج به صورت AsEnumerable
        return Task.FromResult(result.AsEnumerable());
    }
    private RenderFragment<PersonFullDataDto> ItemTemplate => _personFullDataList => builder =>
    {
        builder.OpenElement(0, "div");
        // شرط برای رنک آمیزی آیتم‌ها
        if (_personFullDataList.Status == '0')
        {
            builder.AddAttribute(1, "style", "background-color:limegreen; color: white;");
        }
        else
        {
            builder.AddAttribute(1, "style", "background-color: orangered; color: white;");
        }
        builder.AddContent(2, _personFullDataList.FullNameWCode);
        builder.CloseElement();
    };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // اینجا فرم را اعتبارسنجی می‌کنیم
            isFormValid = PersonsPVamForm.IsValid;
            StateHasChanged(); // به‌روزرسانی UI پس از تغییر وضعیت
        }
        isFormValid = PersonsPVamForm.IsValid;
    }

    private async Task SubmitForm()
    {
        // اگر فرم معتبر بود، اطلاعات را ارسال یا پردازش کنید
        if (PersonsPVamForm.IsValid)
        {
            // به عنوان مثال، نمایش داده‌ها در کنسول


            // اینجا می‌توانید داده‌ها را به API ارسال کنید یا هر عملیات دیگری انجام دهید

            // برای مثال ارسال به یک سرویس یا API:
            // await ApiService.SendDataAsync(person);

            // پس از ارسال، می‌توانید پیامی نشان دهید
            _snackBar.Add("اطلاعات با موفقیت ارسال شد", Severity.Success);
        }
        else
        {
            // در صورت عدم اعتبار فرم، پیام خطا نشان دهید
            _snackBar.Add("لطفاً تمامی فیلدهای مورد نیاز را پر کنید.", Severity.Error);
        }
    }

    private void TogglePersonList()
    {
        ShowPersonList = !ShowPersonList;

        if (ShowPersonList == true)
        {
            _personPVamListFiltered = _personPVamList.Where(p => p.ReqNo != 0).ToList();
        }
        if (PersonsPVamForm.IsTouched)
        {
            var i = 1;
        }
    }

    private void SavePerson()
    {

        try
        {
            if (CurrentPersonPVamDto.isEditable == true)
            {
                if (isEditing)
                {
                    var editpvam = _Db.Pvams.FirstOrDefault(p => p.ReqNo == ReqNoSearchable);
                    if (editpvam != null)
                    {
                        //editpvam.ReqNo = ReqNoSearchable;
                        editpvam.DateD = CurrentPersonPVamDto.DateD;
                        editpvam.DateG = CurrentPersonPVamDto.DateG;
                        editpvam.Mblgvam = CurrentPersonPVamDto.Mblgvam;
                        editpvam.Type = CurrentPersonPVamDto.Type;
                        editpvam.Gst1 = CurrentPersonPVamDto.Gst1;
                        editpvam.Gst2 = CurrentPersonPVamDto.Gst2;
                        editpvam.GstNo = CurrentPersonPVamDto.GstNo;
                        editpvam.GstPay = CurrentPersonPVamDto.GstPay;
                        editpvam.Pkarmozd = CurrentPersonPVamDto.Pkarmozd;
                        editpvam.Mkarmozd = CurrentPersonPVamDto.Mkarmozd;
                        editpvam.Sabtdate = cDateShamsi;
                        editpvam.Status = ' ';
                        editpvam.Lastdate = cDateShamsi;
                        if (OriginalPVam.Mkarmozd != CurrentPersonPVamDto.Mkarmozd)
                        {
                            DelPardar();
                            Add2Pardar();
                        }
                        if (CurrentPersonPVamDto.GstNo != OriginalPVam.GstNo || CurrentPersonPVamDto.DateG != OriginalPVam.DateG)
                        {
                            DelAghsat();
                            Add2DarGst();
                        }
                    }

                }
                else
                {
                    CurrentPersonPVamDto.Sabtdate = cDateShamsi;
                    CurrentPersonPVamDto.FullName = selectedPerson.FullName;
                    CurrentPersonPVamDto.HesabNo = selectedPerson.HesabNo;
                    var newPvam = Mapper.Map<Pvam>(CurrentPersonPVamDto); // Mapping DTO to Entity
                    _personPVamList.Add(CurrentPersonPVamDto);
                    _Db.Pvams.Add(newPvam);
                    if(CurrentPersonPVamDto.Mkarmozd > 0)
                    {
                        Add2Pardar();
                    }
                    Add2DarGst();
                    _snackBar.Add($"وام {CurrentPersonPVamDto.ReqNo} ثبت شد", Severity.Success);
                    isEditing = true;
                }
                _Db.SaveChangesAsync();
                MandehVam = GetMandehVamFromSql(CurrentPersonPVamDto.ReqNo) ?? 0;
                OriginalPVam = Mapper.Map<Pvam>(CurrentPersonPVamDto);
                isNeedUpdate = false;

            }
            else
            {
                _snackBar.Add($" اقساط وام {CurrentPersonPVamDto.ReqNo} پرداخت شده است مجاز به اصلاح نیستید ", Severity.Warning);
                FillPersonPVamInfo(Mapper.Map<PersonPVamDto>(OriginalPVam));// Pvam میدی PvamDto برمیگرده
                isNeedUpdate = false;
            }

            //   ShowClearPVamInfo();

        }
        catch (SqlException ex)
        {
            Console.WriteLine("SQL Error: " + ex.Message);
            Console.WriteLine("Error Code: " + ex.Number);
            _logger.LogError(ex, $"خطای sql: {ex.Message}");

        }
        catch (DbUpdateException ex)
        {
            // اینجا خطاهایی که مربوط به مشکلات ذخیره‌سازی در پایگاه داده هستند مدیریت می‌شود
            // مثلاً خطاهای مربوط به نقض محدودیت‌های پایگاه داده مانند unique constraint

            // به کاربر پیام خطای مناسب نمایش داده می‌شود

            _logger.LogError(ex, "خطایی در ذخیره‌سازی داده‌ها به پایگاه داده رخ داد.");

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"خطای عمومی: {ex.Message}");

        }

    }

    private void EditPersonPVam(PersonPVamDto personpvamdto)
    {
        // CurrentPersonPVamDto = Mapper.Map<PersonPVamDto>(personpvamdto);
        CurrentPersonPVamDto = _personPVamList.FirstOrDefault(p => p.ReqNo == personpvamdto.ReqNo) ?? new PersonPVamDto();
        OriginalPVam = Mapper.Map<Pvam>(CurrentPersonPVamDto);
        //        OriginalPVam = _Db.Pvams.FirstOrDefault(p => p.ReqNo == personpvamdto.ReqNo) ?? new Pvam();// یک کپی برای کنترل تغییرات
        ReqNoSearchable = personpvamdto.ReqNo;

        if (selectedPerson == null) { selectedPerson = new PersonFullDataDto(); }
        selectedPerson.FullName = personpvamdto.FullName;
        selectedPerson.FullNameWCode = personpvamdto.FullName + " شماره تقاضا " + personpvamdto.ReqNo + " ش.حساب " + personpvamdto.HesabNo;
        selectedPerson.HesabNo = personpvamdto.HesabNo;
        selectedPerson.QReqNo = personpvamdto.ReqNo;
        FillPersonPVamInfo(personpvamdto);
        //   selectedPerson = _personFullDataList.FirstOrDefault(p => p.Code == personpvamdto.Pcode) ?? new PersonFullDataDto();
        isEditing = true;
        isNeedUpdate = false;
        isDataCorrected = true;
        myTextField.FocusAsync();
    }

    private async Task CancelEdit()
    {
        if (isNeedUpdate)
        {
            var dialogContext = "";
            dialogContext = "اطلاعات تغییرکرده !!! برای لغو مطمئن هستید ؟";
            // اینجا باید یک دیالوگ برای تایید حذف باز کنیم
            var parameters = new DialogParameters
            {
                {nameof(Shared.Dialogs.DeleteConfirmationDialog.ContextText), dialogContext}
            };

            var dialog = DialogService.Show<DeleteConfirmationDialog>("اخطار تغییر", parameters);
            var result = await dialog.Result;
            if (result?.Canceled == true)
            {
                return;
            }
        }
        CurrentPersonPVamDto = new PersonPVamDto();
        isEditing = false;
        isNeedUpdate = false;
        ShowClearPVamInfo();
    }
    private async Task OpenDeleteDialog(PersonPVamDto context)
    {
        var deleteContext = context.FullName;
        deleteContext = " برای حذف وام " + deleteContext + " مطمئن هستید؟ ";
        // اینجا باید یک دیالوگ برای تایید حذف باز کنیم
        var parameters = new DialogParameters
    {
        { nameof(Shared.Dialogs.DeleteConfirmationDialog.ContextText), deleteContext }
    };

        var dialog = DialogService.Show<DeleteConfirmationDialog>("حذف وام", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // اگر کاربر گزینه Yes را انتخاب کرده باشد، عملیات حذف انجام می‌شود
                ReqNoSearchable = context.ReqNo;
                var pvamToRemove = _personPVamList.FirstOrDefault(p => p.ReqNo == ReqNoSearchable);

                if (pvamToRemove != null)
                {
                    ///  حذف درخواست اتوماتیک وام
                    var PvamItem = await _Db.Pvams.FirstOrDefaultAsync(p => p.ReqNo == context.ReqNo);
                    if (PvamItem != null)
                    {
                        _Db.Remove(PvamItem);

                    }
                    _personPVamList.Remove(context);
                    CancelEdit();

                    // await _Db.SaveChangesAsync();  // اطمینان از اجرای غیرهمزمان
                    _snackBar.Add($" وام {pvamToRemove.FullName} حذف شد ", Severity.Warning);
                    _Db.SaveChanges();
                }
                else
                {
                    // شخصی با این ID در لیست پیدا نشد
                    _snackBar.Add("رکوردی با این شناسه پیدا نشد.", Severity.Error);
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine("SQL Error: " + ex.Message);
                Console.WriteLine("Error Code: " + ex.Number);
                _logger.LogError(ex, $"خطای sql: {ex.Message}");
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError(ex, "خطای غیرمنتظره در کامپوننت MyComponent.");

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"خطای عمومی: {ex.Message}");

            }
        }
    }

    private void OnPCodeChanged()
    {
        if (selectedPerson != null && selectedPerson.Code != null)
        {
            ReqNoSearchable = selectedPerson.QReqNo;
            OnReqNoChanged();
        }
    }
    private void OnReqNoChanged()
    {
        ///
        ///    کنترل اینکه تقاضا وجود دارد و وام پرداخت شده یا نه  ؟
        ///
        var personQVam = _personFullDataList.FirstOrDefault(p => p.QReqNo == ReqNoSearchable);
        if (personQVam != null)   // درخواست موجود است
        {

            ReqNoSearchable = personQVam.QReqNo;
            PCodeSearchable = personQVam.Code;
            if (selectedPerson == null) { selectedPerson = new PersonFullDataDto(); }
            selectedPerson.Code = PCodeSearchable;
            selectedPerson.QReqNo = ReqNoSearchable;
            selectedPerson.FullNameWCode = personQVam.FullName + " شماره تقاضا " + personQVam.QReqNo + " ش.حساب " + personQVam.HesabNo;
            selectedPerson.FullName = personQVam.FullName;
            selectedPerson.Type = personQVam.Type;

            if (personQVam.PReqNo != 0)  // وام پرداخت شده است
            {
                var perPVam = _Db.Pvams.SingleOrDefault(p => p.ReqNo == ReqNoSearchable);
                if (perPVam != null)
                {
                    var perPVamDto = Mapper.Map<PersonPVamDto>(perPVam);
                    if (perPVam.GstPay == 0) perPVamDto.isEditable = true;
                    perPVamDto.Pcode = personQVam.Code;
                    FillPersonPVamInfo(perPVamDto);
                    isNeedUpdate = false;
                    isEditing = true;
                }
            }
            else 
            {
                Mapper.Map(new PersonPVamDto(), CurrentPersonPVamDto);
                V_YearD = DateService.GetHYear(cDateShamsi);
                V_MonthD = DateService.GetHMonth(cDateShamsi);
                V_DayD = DateService.GetHDay(cDateShamsi);
                V_YearG = DateService.GetHYear(cDateShamsiNextMonth);
                V_MonthG = DateService.GetHMonth(cDateShamsiNextMonth);
                V_DayG = DateService.GetHDay(cDateShamsiNextMonth);

                CurrentPersonPVamDto.DateD = cDateShamsi;
                CurrentPersonPVamDto.Lastdate = cDateShamsi;
                CurrentPersonPVamDto.DateG = cDateShamsiNextMonth;
                CurrentPersonPVamDto.Pcode = PCodeSearchable;
                CurrentPersonPVamDto.FullName = selectedPerson.FullName;
                CurrentPersonPVamDto.ReqNo = ReqNoSearchable;
                CurrentPersonPVamDto.Mblgvam = personQVam.Mblg;
                CurrentPersonPVamDto.Mblgmain = (int)personQVam.Mblg;
                CurrentPersonPVamDto.GstNo = 30;
                CurrentPersonPVamDto.GstPay = 0;
                CurrentPersonPVamDto.Gst1 = (int)(CurrentPersonPVamDto.Mblgvam / 30 / 10000 * 10000);
                CurrentPersonPVamDto.Gst2 = CurrentPersonPVamDto.Mblgvam - (CurrentPersonPVamDto.Gst1 * 29);
                CurrentPersonPVamDto.Pkarmozd = 7;
                CurrentPersonPVamDto.Mkarmozd = (int)((double)CurrentPersonPVamDto.Mblgvam * 7 / 100);
                CurrentPersonPVamDto.Type = selectedPerson.Type;
                CurrentPersonPVamDto.isEditable = true;

                isNeedUpdate = true;
                isEditing = false;
                MandehVam = 0;
            }
        }
        else
        {
            _snackBar.Add(" چنین تقاضایی موجود نیست ", Severity.Warning);
        }
    }
    // متدی برای دریافت پیغام خطا از داده‌های وارد شده
    private string GetErrorMessageForField(string fieldName)
    {
        var context = new ValidationContext(CurrentPersonPVamDto);
        var validationResults = new List<ValidationResult>();

        // اعتبارسنجی فیلد خاص

        Validator.TryValidateProperty(
            typeof(PersonPVamDto).GetProperty(fieldName).GetValue(CurrentPersonPVamDto),
            new ValidationContext(CurrentPersonPVamDto) { MemberName = fieldName },
            validationResults);


        // اگر خطا وجود دارد، پیغام خطا را برمی‌گرداند
        return validationResults.Any() ? validationResults.First().ErrorMessage : string.Empty;
    }

    // private bool FilterFunction(Person _person) => FilterFunc(_person, searchString1);
    private bool FilterFunction(PersonPVamDto _personPVamList)
    {
        // بررسی null بودن searchString1
        if (string.IsNullOrEmpty(searchString1))
        {
            // اگر searchString1 null یا خالی بود، می‌توانید نتیجه دلخواه را برگردانید یا بررسی کنید.
            return true; // یا هر عمل دیگری که مناسب است
        }

        return FilterFunc(_personPVamList, searchString1);
    }

    private bool FilterFunc(PersonPVamDto _perPvam, string searchString)
    {

        if (_perPvam is null) return false;
        if (string.IsNullOrWhiteSpace(searchString) && _perPvam.ReqNo != 0)
            return true;
        if (!string.IsNullOrEmpty(_perPvam.FullName) && TextHelper.NormalContain(_perPvam.FullName, searchString) && _perPvam.ReqNo != 0)
            return true;
        if ($"{_perPvam.Pcode} {_perPvam.ReqNo} {_perPvam.HesabNo} {_perPvam.Mblgvam} {_perPvam.DateD} {_perPvam.DateG}".Contains(searchString) && _perPvam.ReqNo != 0)
            return true;

        return false;
    }
    private void OnSearchTextChanged()
    {
        if (!string.IsNullOrEmpty(searchString1))
        {
            searchString1 = TextHelper.NormalizeSimpleString(searchString1);
        }
    }
    // اعتبارسنجی مدل
    private bool ValidateModel()
    {
        var context = new ValidationContext(CurrentPersonPVamDto);
        var validationResults = new List<ValidationResult>();
        return Validator.TryValidateObject(CurrentPersonPVamDto, context, validationResults, true);
    }
    // متدی برای ارسال فرم
    // اعتبارسنجی مدل
    private bool isValidFnc => ValidateForm();

    private bool ValidateForm()
    {
        // پرکردن فیلد تاریخ
        CurrentPersonPVamDto.DateD = DateService.DateShamsiFormat(V_YearD, V_MonthD, V_DayD);
        CurrentPersonPVamDto.DateG = DateService.DateShamsiFormat(V_YearG, V_MonthG, V_DayG);
        //isDataCorrected = false;
        // مثال: اعتبارسنجی یک فرم
        if (selectedPerson == null) return false;
        if (CurrentPersonPVamDto.Pcode == null) return false;
        if (CurrentPersonPVamDto.Mblgvam <= 0) return false;
        if (CurrentPersonPVamDto.Gst1 <= 0) return false;
        if (CurrentPersonPVamDto.Gst2 <= 0) return false;
        if (CurrentPersonPVamDto.ReqNo == 0) return false;
        if (CurrentPersonPVamDto.GstNo <= 0) return false;
        if (!DateService.isDateValid(CurrentPersonPVamDto.DateD)) return false;
        if (!DateService.isDateValid(CurrentPersonPVamDto.DateG)) return false;

        isDataCorrected = ValidateModel();
        if (!isDataCorrected) return false;


        return isNeedUpdate;
    }
    private void ShowClearPVamInfo()
    {
        ReqNoSearchable = 0;
        //PCodeSearchable = "";
        Mapper.Map(new PersonPVamDto(), CurrentPersonPVamDto);
        ///
        ///تاریخ با روز جاری پرمیشود
        ///
        V_YearD = DateService.GetHYear(cDateShamsi);
        V_MonthD = DateService.GetHMonth(cDateShamsi);
        V_DayD = DateService.GetHDay(cDateShamsi);
        V_YearG = DateService.GetHYear(cDateShamsiNextMonth);
        V_MonthG = DateService.GetHMonth(cDateShamsiNextMonth);
        V_DayG = DateService.GetHDay(cDateShamsiNextMonth);
        CurrentPersonPVamDto.DateD = cDateShamsi;
        CurrentPersonPVamDto.Lastdate = cDateShamsi;
        CurrentPersonPVamDto.DateG = cDateShamsiNextMonth;
        CurrentPersonPVamDto.FullName = "";
        CurrentPersonPVamDto.Type = '1';
        CurrentPersonPVamDto.Mblgvam = 0;
        CurrentPersonPVamDto.Mblgmain = 0;
        CurrentPersonPVamDto.Gst1 = 0;
        CurrentPersonPVamDto.Gst2 = 0;
        CurrentPersonPVamDto.GstNo = 0;
        CurrentPersonPVamDto.GstPay = 0;
        CurrentPersonPVamDto.Pkarmozd = 3;
        CurrentPersonPVamDto.Mkarmozd = 0;
        CurrentPersonPVamDto.ReqNo = ReqNoSearchable;
        OriginalPVam = Mapper.Map<Pvam>(CurrentPersonPVamDto);
        selectedPerson = null;
        MandehVam = 0;
    }

    private void FillPersonPVamInfo(PersonPVamDto personToAdd)
    {
        CurrentPersonPVamDto = Mapper.Map<PersonPVamDto>(personToAdd);

        V_YearD = DateService.GetHYear(CurrentPersonPVamDto.DateD);
        V_MonthD = DateService.GetHMonth(CurrentPersonPVamDto.DateD);
        V_DayD = DateService.GetHDay(CurrentPersonPVamDto.DateD);
        V_YearG = DateService.GetHYear(CurrentPersonPVamDto.DateG);
        V_MonthG = DateService.GetHMonth(CurrentPersonPVamDto.DateG);
        V_DayG = DateService.GetHDay(CurrentPersonPVamDto.DateG);

        OriginalPVam = Mapper.Map<Pvam>(CurrentPersonPVamDto);
        MandehVam = GetMandehVamFromSql(CurrentPersonPVamDto.ReqNo) ?? 0;
    }
    private void isDataChanged()
    {
        isNeedUpdate = false;
        CurrentPersonPVamDto.DateD = DateService.DateShamsiFormat(V_YearD, V_MonthD, V_DayD);
        CurrentPersonPVamDto.DateG = DateService.DateShamsiFormat(V_YearG, V_MonthG, V_DayG);
        if (OriginalPVam.ReqNo != CurrentPersonPVamDto.ReqNo) isNeedUpdate = true;
        if (OriginalPVam.DateD != CurrentPersonPVamDto.DateD) isNeedUpdate = true;
        if (OriginalPVam.DateG != CurrentPersonPVamDto.DateG) isNeedUpdate = true;
        if (OriginalPVam.Type != CurrentPersonPVamDto.Type) isNeedUpdate = true;
        if (OriginalPVam.Gst1 != CurrentPersonPVamDto.Gst1) isNeedUpdate = true;
        if (OriginalPVam.Gst2 != CurrentPersonPVamDto.Gst2) isNeedUpdate = true;
        if (OriginalPVam.GstNo != CurrentPersonPVamDto.GstNo) isNeedUpdate = true;
        if (OriginalPVam.Pkarmozd != CurrentPersonPVamDto.Pkarmozd) isNeedUpdate = true;
        if (OriginalPVam.Mkarmozd != CurrentPersonPVamDto.Mkarmozd) isNeedUpdate = true;


    }
    private void CalculateVaminfo(int nNo)
    {
        if (CurrentPersonPVamDto.isEditable == true)
        {
            switch (nNo)
            {
                case 1:  // مبلغ وام
                    if (OriginalPVam.Mblgvam != CurrentPersonPVamDto.Mblgvam)
                    {
                        if (CurrentPersonPVamDto.GstNo != 0)
                        {
                            CurrentPersonPVamDto.Gst1 = (int)(CurrentPersonPVamDto.Mblgvam / CurrentPersonPVamDto.GstNo / 10000 * 10000);
                            CurrentPersonPVamDto.Gst2 = CurrentPersonPVamDto.Mblgvam - (CurrentPersonPVamDto.Gst1 * (CurrentPersonPVamDto.GstNo - 1));
                            if (CurrentPersonPVamDto.Pkarmozd != 0) CurrentPersonPVamDto.Mkarmozd = (int)((double)CurrentPersonPVamDto.Mblgvam * CurrentPersonPVamDto.Pkarmozd / 100);
                            isNeedUpdate = true;
                        }
                    }
                    break;
                case 2:  // تعداد اقساط
                    if (OriginalPVam.GstNo != CurrentPersonPVamDto.GstNo)
                    {
                        if (CurrentPersonPVamDto.GstNo != 0)
                        {
                            CurrentPersonPVamDto.Gst1 = (int)(CurrentPersonPVamDto.Mblgvam / CurrentPersonPVamDto.GstNo / 10000 * 10000);
                            CurrentPersonPVamDto.Gst2 = CurrentPersonPVamDto.Mblgvam - (CurrentPersonPVamDto.Gst1 * (CurrentPersonPVamDto.GstNo - 1));
                            isNeedUpdate = true;
                        }

                    }
                    break;
                case 3:  // قسط آخر
                    if (OriginalPVam.Gst2 != CurrentPersonPVamDto.Gst2)
                    {
                        if (CurrentPersonPVamDto.GstNo != 0)
                        {
                            CurrentPersonPVamDto.Gst1 = (int)((CurrentPersonPVamDto.Mblgvam - CurrentPersonPVamDto.Gst2) / (CurrentPersonPVamDto.GstNo - 1));
                            isNeedUpdate = true;
                        }
                    }
                    break;
                case 4:  // سایر اقساط
                    if (OriginalPVam.Gst1 != CurrentPersonPVamDto.Gst1)
                    {
                        CurrentPersonPVamDto.Gst2 = CurrentPersonPVamDto.Mblgvam - (CurrentPersonPVamDto.Gst1 * (CurrentPersonPVamDto.GstNo - 1));
                        isNeedUpdate = true;
                    }

                    break;
                case 5:   // درصد کارمزد

                    if (OriginalPVam.Pkarmozd != CurrentPersonPVamDto.Pkarmozd)
                    {
                        if (CurrentPersonPVamDto.Pkarmozd != 0) CurrentPersonPVamDto.Mkarmozd = (int)((double)CurrentPersonPVamDto.Mblgvam * CurrentPersonPVamDto.Pkarmozd / 100);
                        isNeedUpdate = true;
                        
                    }
                    break;
                case 6:   // مبلغ کارمزد
                    var nkar = (double)CurrentPersonPVamDto.Mkarmozd / CurrentPersonPVamDto.Mblgvam * 100.0;
                    CurrentPersonPVamDto.Pkarmozd = (int)nkar;
                    isNeedUpdate = true;
                    break;
                default:
                    break;
            }
        }
        else
        {
            _snackBar.Add($" اقساط وام {CurrentPersonPVamDto.ReqNo} پرداخت شده است مجاز به اصلاح نیستید ", Severity.Warning);
            // Mapper.Map(OriginalPVam, CurrentPersonPVamDto);
            FillPersonPVamInfo(Mapper.Map<PersonPVamDto>(OriginalPVam));// Pvam میدی PvamDto برمیگرده
        }
    }
    private long? GetMandehVamFromSql(int nReqNo)
    {
        var mandeh = _Db.TotalVams.FirstOrDefault(p => p.ReqNo == nReqNo);
        if (mandeh != null) return mandeh.Mblgvam - mandeh.MblgPaid;
        return CurrentPersonPVamDto.Mblgvam;
    }

    private void DelPardar()
    {

        var cReqNo = CurrentPersonPVamDto.ReqNo.ToString();
        var nVal = OriginalPVam.Mkarmozd;
        var cDate = OriginalPVam.DateD;
        var recordsToDel = _Db.Pardars.Where(p => p.ReqNo.Contains(cReqNo) && p.Date == cDate && p.Mblg == nVal).ToList();
        _Db.RemoveRange(recordsToDel);
    }
    private void DelAghsat()
    {
        var recordsToDel = _Db.Dargsts.Where(p => p.ReqNo == CurrentPersonPVamDto.ReqNo).ToList();
        _Db.RemoveRange(recordsToDel);
    }
    private void Add2Pardar()
    {
        var cPardar = new Pardar();
        cPardar.Pcode = "00000"; //CurrentPersonPVamDto.Pcode;
        cPardar.Action = '1';
        cPardar.Scode = "01";
        cPardar.Babat = "کارمزد وام" + " " + CurrentPersonPVamDto.ReqNo + " " + CurrentPersonPVamDto.FullName;
        cPardar.Mblg = (int)CurrentPersonPVamDto.Mkarmozd;
        cPardar.Date = CurrentPersonPVamDto.DateD;
        cPardar.ReqNo = CurrentPersonPVamDto.ReqNo.ToString().PadLeft(5);
        _Db.Pardars.Add(cPardar);

        cPardar = new Pardar();
        cPardar.Pcode = CurrentPersonPVamDto.Pcode;
        cPardar.Action = '2';
        cPardar.Scode = "01";
        cPardar.Babat = " کارمزد وام" + " "  + CurrentPersonPVamDto.ReqNo;
        cPardar.Mblg = (int)CurrentPersonPVamDto.Mkarmozd;
        cPardar.Date = CurrentPersonPVamDto.DateD;
        cPardar.ReqNo = CurrentPersonPVamDto.ReqNo.ToString().PadLeft(5);
        _Db.Pardars.Add(cPardar);
    }
    private void Add2DarGst()
    {
        var cDarGst = new Dargst();
        var cDateGst = CurrentPersonPVamDto.DateG;
        for (byte i = 1; i < CurrentPersonPVamDto.GstNo+1 ; i ++)
        {
            cDarGst.ReqNo = CurrentPersonPVamDto.ReqNo;
            cDarGst.DateG = cDateGst;
            cDarGst.DateP = " ";
            cDarGst.GstNo = i;
            cDarGst.Gstmblg = 0;
            cDarGst.Pasandaz = 0;
            cDarGst.Status = " ";
            cDateGst = DateService.DateNextMonthShamsi(cDateGst);
            _Db.Dargsts.Add(cDarGst);
            cDarGst = new Dargst();
        }
    }
}