@page "/graphcurrentvams"
@inject DatabaseContext _Db
@inject SandoghService SandoghService
@inject VamBlazor.Client.Application.Services.PersonServices PersonServices
@layout MainLayoutReports
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using VamBlazor.Client.Application.Dtos
@using VamBlazor.Client.Application.Services
@using VamBlazor.Client.Application.CommonFunc
@using VamBlazor.Client.Domain.Entities


<!-- دکمه برای چاپ گزارش -->

<MudButton @onclick="PrintReport" Variant="Variant.Filled"
           Class="ma-0 pa-0"
           StartIcon="@Icons.Material.Filled.Print"
           IconColor="Color.Primary"
           Style="@($"display:{(isButtonVisible ? "flex" : "none")};width:100px")">
    چاپ گزارش
</MudButton>

<!-- این خط برای جلوگیری از تداخل و شروع جدید در هر رکورد -->
<div style="clear: both;"></div>
<div style="text-align:center" class="mt-n5">
    @SandoghName
</div>
<div style="border:double;display: flex; width: 98%; margin-left:0;">
    <MudGrid Spacing="0" Style=" background-color:antiquewhite">
        <!-- ردیف اول: دو چارت در بالا -->
        <MudItem xs="12" md="6">
            <MudChart ChartType="ChartType.Bar" class="ma-1" style="border:solid;background-color:azure" @bind-SelectedIndex="Index" ChartSeries="@SeriesForNumberOfLoansByDate" XAxisLabels="@XAxisLabels" Width="100%" Height="225px">
             <CustomGraphics>
        <style>
            .heavy { font: bold 30px Helvetica; }
            .Rrrrr { font: italic 40px Helvetica; fill: rgb(62,44,221); }
        </style>
        <text x="80" y="35" class="heavy">I Love</text>
        <text x="105" y="70" class="Rrrrr">MudBlazor!</text>
    </CustomGraphics>
            </MudChart>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudChart ChartType="ChartType.Bar" class="ma-1" style="border:solid;background-color:azure" @bind-SelectedIndex="Index" ChartSeries="@SeriesForLoanAmountsAndPaidByLoanDate" XAxisLabels="@XAxisLabels" Width="100%" Height="225px">
               <MudChartOption Type="ChartType.Bar">
            <ChartOptions>
                <ChartJsOptions>
                    <Scales>
                        <YAxis>
                            <Ticks>
                                <YAxisFormat>
                                    #,##0  <!-- این فرمت باعث نمایش اعداد با کاما از هم جدا می‌شود -->
                                </YAxisFormat>
                            </Ticks>
                        </YAxis>
                    </Scales>
                </ChartJsOptions>
            </ChartOptions>
        </MudChartOption> 
            </MudChart>
        </MudItem>
        <!-- ردیف دوم: دو چارت در پایین -->
        <MudItem xs="12" md="6" class="mt-n3">
            <MudChart ChartType="ChartType.Bar" class="ma-1" style="border:solid;background-color:azure" @bind-SelectedIndex="Index" ChartSeries="@SeriesForNumberOfLoansByLoanAmount" XAxisLabels="@LoanAmountXAxisLabels" Width="100%" Height="250px">
                
            </MudChart>
        </MudItem>

        <MudItem xs="12" md="6" class="mt-n3">
            <MudChart ChartType="ChartType.Bar" class="ma-1" style="border:solid;background-color:azure" @bind-SelectedIndex="Index" ChartSeries="@SeriesForLoanAmountsAndPaidByLoanAmount" XAxisLabels="@LoanAmountXAxisLabels" Width="100%" Height="250px">
                
            </MudChart>
        </MudItem>
    </MudGrid>
</div>

<br />
<div style="page-break-after: always;"></div>

@code {
    private List<vwPersonLastGst> ReportRecords { get; set; }
    private string SandoghName = "";
    private bool isButtonVisible = true;
    private int Index = -1; // default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> SeriesForLoanAmountsAndPaidByLoanDate = new List<ChartSeries>();
    public List<ChartSeries> SeriesForNumberOfLoansByDate = new List<ChartSeries>();
    public List<ChartSeries> SeriesForNumberOfLoansByLoanAmount = new List<ChartSeries>();
    public List<ChartSeries> SeriesForLoanAmountsAndPaidByLoanAmount = new List<ChartSeries>();

    public string[] XAxisLabels;
    public string[] LoanAmountXAxisLabels; // اضافه کردن محور X مخصوص چارت‌های ۳ و ۴

    protected override void OnInitialized()
    {
        ReportRecords = _Db.vwPersonLastGst.OrderBy(p => p.DateD).ToList();
        SandoghName = SandoghService.GetSandoghName();
        // داده‌ها را از رکوردها استخراج می‌کنیم


        // سری اول: تعداد وام براساس تاریخ
        var groupedByMonthYearCount = ReportRecords
            .GroupBy(x => x.DateD.Substring(0, 4))  // استخراج yyyyMM از تاریخ
            .Select(g => new
            {
                MonthYear = g.Key,
                CountLoans = g.Count()  // تعداد وام‌ها
            }).OrderBy(p => p.MonthYear).ToList();

        SeriesForNumberOfLoansByDate = new List<ChartSeries>
        {
            new ChartSeries()
            {
                Name = "تعدادوام‌",
                Data = groupedByMonthYearCount.Select(g => (double)g.CountLoans).ToArray()
            }
        };
        // سری دوم: وام وپرداخت براساس تاریخ
        var groupedByMonthYearVam = ReportRecords
            .GroupBy(x => x.DateD.Substring(0, 4))  // استخراج yyyyMM از تاریخ
            .Select(g => new
            {
                MonthYear = g.Key,
                TotalLoanAmount = g.Sum(x => x.MblgVam),  // جمع مبلغ وام
                TotalPaidLoan = g.Sum(x => x.PaidVam)  // جمع پرداخت وام
            }).OrderBy(p => p.MonthYear).ToList();

        // تبدیل داده‌ها به فرمت مناسب برای چارت
        XAxisLabels = groupedByMonthYearVam.Select(g => TextHelper.ConvertToPersian(g.MonthYear.ToString(), false)).ToArray();

        // ساخت سری‌های داده برای چارت‌ها
        SeriesForLoanAmountsAndPaidByLoanDate = new List<ChartSeries>
        {
            new ChartSeries()
            {
                Name = "وام",
                Data = groupedByMonthYearVam.Select(g => (double)g.TotalLoanAmount/1000000).ToArray()
            },
            new ChartSeries()
            {
                Name = "پرداخت",
                Data = groupedByMonthYearVam.Select(g => (double)g.TotalPaidLoan/1000000).ToArray()
            }
        };
        // سری سوم: تعداد وام براساس مبلغ وام
        var groupedByLoanAmountCount = ReportRecords
            .GroupBy(x => x.MblgVam)  // گروه‌بندی بر اساس مبلغ وام
            .Select(g => new
            {
                LoanAmount = g.Key,
                CountLoans = g.Count()  // تعداد وام‌ها با مبلغ مشابه
            }).OrderBy(p => p.LoanAmount).ToList();
        //
        LoanAmountXAxisLabels = groupedByLoanAmountCount.Select(g => TextHelper.ConvertToPersian((g.LoanAmount / 1000000).ToString("N0"), true)).ToArray(); // تنظیم محور X برای مبلغ وام

        SeriesForNumberOfLoansByLoanAmount = new List<ChartSeries>
        {
            new ChartSeries()
            {
                Name = "تعدادوام‌",
                Data = groupedByLoanAmountCount.Select(g => (double)g.CountLoans).ToArray()
            }
        };

        // سری چهارم: مبلغ وام و پرداخت وام براساس مبلغ وام
        var groupedByLoanAmountVam = ReportRecords
            .GroupBy(x => x.MblgVam)
            .Select(g => new
            {
                LoanAmount = g.Key,
                TotalLoanAmount = g.Sum(x => x.MblgVam),
                TotalPaidLoan = g.Sum(x => x.PaidVam)
            }).OrderBy(p => p.LoanAmount).ToList();

        SeriesForLoanAmountsAndPaidByLoanAmount = new List<ChartSeries>
        {
            new ChartSeries()
            {
                Name = "وام",
                Data = groupedByLoanAmountVam.Select(g => (double)g.TotalLoanAmount/1000000).ToArray()
            },
            new ChartSeries()
            {
                Name = "پرداخت",
                Data = groupedByLoanAmountVam.Select(g => (double)g.TotalPaidLoan/1000000).ToArray()
            }
        };
    }

    private async Task PrintReport()
    {
        isButtonVisible = !isButtonVisible;
        StateHasChanged();
        await Task.Delay(1000);
        await JSRuntime.InvokeVoidAsync("window.printAndRedirect", "/", 500);
    }
}
